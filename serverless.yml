# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.

service: apollo-lambda
# app and org for use with dashboard.serverless.com
app: apollo-lambda
org: bhushanbharat

provider:
  name: aws
  runtime: nodejs12.x
  # you can overwrite defaults here
  stage: dev
  region: ap-south-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["MenuTable", "Arn"] }
  environment:
    MENU: ${self:custom.menutable}
    DOMAIN_SUFFIX: espresso-bar

plugins:
  - serverless-webpack
  - serverless-plugin-include-dependencies
  - serverless-dynamodb-local
  - serverless-offline #needs to be last in the list so dynamoDB can be started offline for testing**

# Custom Settings
custom:
  menutable: "espresso-bar-menu-${self:provider.stage}"
  serverless-offline:
    port: 4000
  #webpackIncludeModules: true
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true
    packager: yarn
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: true
      convertEmptyValues: true

# GraphQL endpoint Config
functions:
  graphql:
    handler: server.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

#AWS Resources
resources:
  Resources:
    # DynamoDB Config
    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.menutable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Authorizer for Api EP
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito_auth
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - serviceUserPool
              - Arn

    # Cognitor Pool config goes below this
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: user-pool-${opt:stage, self:provider.region}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
